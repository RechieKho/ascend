{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Ascend's Documentation Ascend is an open-source maze-generating metroidvania game, and this documentation is all about guiding you to contribute to this project . Note: This documentation is still under development and it won't be completed overnight.","title":"Home"},{"location":"#welcome-to-ascends-documentation","text":"Ascend is an open-source maze-generating metroidvania game, and this documentation is all about guiding you to contribute to this project . Note: This documentation is still under development and it won't be completed overnight.","title":"Welcome to Ascend's Documentation"},{"location":"contribute/","text":"Stuffs to know to contribute Here you will find the guidelines to contribute to this project. Workflow This is how we work: I turn tasks to be done as issues . You (a kind person) check out the issues and deal with the issues with the tag deal with me first . After completing the issue, send a pull request. I will review it. If cool, I accept. If not, I'll tell you why. This is it! Do be patient when waiting for my respond. Note that pull request that is not directly link to an issue won't be prioritized . Code style and best practices Codes For codes, I would like to emphasize these things: KISS , Keep it super simple . Don't add unnecessary nodes. Single-responsibility principle . Reduce the usage of connect and instead connect signal in the scene. Be a never-nester, utilize early return. Naming things For naming things: Entity type Naming style files and folders In kebab-case . methods In snake_case . Start with a verb unless it is a callback signal In snake_case . Start with on and the event happend in past tense. ( on_player_healed ) variable In snake_case . class name In PascalCase . Project structure For project structure & where to store what: Folder File stored prefabs Scenes that will be reused across scenes. The scripts that are only for that particular scene should be stored together. scenes The main scenes for the game. The scripts that are only for that particular scene should be stored together. graphics All the graphical assets. scripts Script that will be reused across scenes. It usually either will have its class name or an autoload. docs Stores all the documentations in markdown format.","title":"Stuffs to know to contribute"},{"location":"contribute/#stuffs-to-know-to-contribute","text":"Here you will find the guidelines to contribute to this project.","title":"Stuffs to know to contribute"},{"location":"contribute/#workflow","text":"This is how we work: I turn tasks to be done as issues . You (a kind person) check out the issues and deal with the issues with the tag deal with me first . After completing the issue, send a pull request. I will review it. If cool, I accept. If not, I'll tell you why. This is it! Do be patient when waiting for my respond. Note that pull request that is not directly link to an issue won't be prioritized .","title":"Workflow"},{"location":"contribute/#code-style-and-best-practices","text":"","title":"Code style and best practices"},{"location":"contribute/#codes","text":"For codes, I would like to emphasize these things: KISS , Keep it super simple . Don't add unnecessary nodes. Single-responsibility principle . Reduce the usage of connect and instead connect signal in the scene. Be a never-nester, utilize early return.","title":"Codes"},{"location":"contribute/#naming-things","text":"For naming things: Entity type Naming style files and folders In kebab-case . methods In snake_case . Start with a verb unless it is a callback signal In snake_case . Start with on and the event happend in past tense. ( on_player_healed ) variable In snake_case . class name In PascalCase .","title":"Naming things"},{"location":"contribute/#project-structure","text":"For project structure & where to store what: Folder File stored prefabs Scenes that will be reused across scenes. The scripts that are only for that particular scene should be stored together. scenes The main scenes for the game. The scripts that are only for that particular scene should be stored together. graphics All the graphical assets. scripts Script that will be reused across scenes. It usually either will have its class name or an autoload. docs Stores all the documentations in markdown format.","title":"Project structure"},{"location":"game-design-document/","text":"Game Design Document As the one-line description said, it is a maze-generating metroidvania game. It is about a tortoise wanderers travel across the vast, never-ending world, in search of honing its skill to the extreme. The game will be a randomized metroidvania, or roguelike that never resets, mixing of generated levels and exploration & progression. This game is currently targeted to be a desktop , singleplayer game. Do note that it is always open for suggestion at our github issues page . Gameplay / Mechanics Levels The game composes of infinite number of generated level. Each level has its own biome and unique enemies. In a level, there will be a boss enemy for the player to defeat in order to proceed to the next level. The map of the level will be vast so the player will need to venture and explore the terrain to hunt down the boss enemy. Player's control There will be keys bind to these inputs: Left Right Up Down Jump Dash Heal (holding down the key) Basic attack Skill cast 1 Skill cast 2 When editing moveset, the player can bind to these keys (combination): Skill Cast N Up + Skill Cast N Down + Skill Cast N Dash + Skill Cast N Where N in Skill Cast N is either 1 or 2 . The rest of the keys (combination) cannot be bind to any skill. The player can move like a normal 2D platformer (walks left & right using Left & Right key, single jump with Jump key): Walk to left ( Left key) Walk to right ( Right key) Jump ( Jump key) The player can look up or down (move the viewport up or down): Look up (Holding Up key) Look down (Holding Down key) The player can interact with NPC or pickable item using Up key. The player can also do basic attack for all 4 direction: Attack direction the player is facing ( Basic attack key) Attack upward ( Up key + Basic attack key) Attack downward ( Down key + Basic attack key) Hitting enemies, projectiles and some terrain downward sends the player upward. Inventory system After you pick up a pickable item, it will be stored in this inventory system. The item stored will be used to do quest and unlock special interaction with NPC. Health The player will have interger amount of health and damage received will cost 1 to 3 health depending on the damage. The player can use mana to restore health through healing (holding Heal key). Since the levels are vast, there will be checkpoints scattered across the level. On death, player will be respawned to the last checkpoint. The player will lost part of the items in the inventory system. There will left a shell at the location the player died, in which the player can collect back the items by breaking the shell. Mana Hitting enemies or some special object gains mana. The player will no longer receive mana if the mana is maxed out. Skills For each level passed, the player will grant a new skill. There will have a skill system in which the player can defines its moveset (or skill set) from the list of skills acquired from defeating bosses. Each skill will have its own cooldown and mana cost. The player can only edit moveset at the checkpoints. By editing moveset, the player can bind certain key input or key input combination to the skill obtained. If you have any uncertainty or suggestion, please open an issue .","title":"Game design document"},{"location":"game-design-document/#game-design-document","text":"As the one-line description said, it is a maze-generating metroidvania game. It is about a tortoise wanderers travel across the vast, never-ending world, in search of honing its skill to the extreme. The game will be a randomized metroidvania, or roguelike that never resets, mixing of generated levels and exploration & progression. This game is currently targeted to be a desktop , singleplayer game. Do note that it is always open for suggestion at our github issues page .","title":"Game Design Document"},{"location":"game-design-document/#gameplay-mechanics","text":"","title":"Gameplay / Mechanics"},{"location":"game-design-document/#levels","text":"The game composes of infinite number of generated level. Each level has its own biome and unique enemies. In a level, there will be a boss enemy for the player to defeat in order to proceed to the next level. The map of the level will be vast so the player will need to venture and explore the terrain to hunt down the boss enemy.","title":"Levels"},{"location":"game-design-document/#players-control","text":"There will be keys bind to these inputs: Left Right Up Down Jump Dash Heal (holding down the key) Basic attack Skill cast 1 Skill cast 2 When editing moveset, the player can bind to these keys (combination): Skill Cast N Up + Skill Cast N Down + Skill Cast N Dash + Skill Cast N Where N in Skill Cast N is either 1 or 2 . The rest of the keys (combination) cannot be bind to any skill. The player can move like a normal 2D platformer (walks left & right using Left & Right key, single jump with Jump key): Walk to left ( Left key) Walk to right ( Right key) Jump ( Jump key) The player can look up or down (move the viewport up or down): Look up (Holding Up key) Look down (Holding Down key) The player can interact with NPC or pickable item using Up key. The player can also do basic attack for all 4 direction: Attack direction the player is facing ( Basic attack key) Attack upward ( Up key + Basic attack key) Attack downward ( Down key + Basic attack key) Hitting enemies, projectiles and some terrain downward sends the player upward.","title":"Player's control"},{"location":"game-design-document/#inventory-system","text":"After you pick up a pickable item, it will be stored in this inventory system. The item stored will be used to do quest and unlock special interaction with NPC.","title":"Inventory system"},{"location":"game-design-document/#health","text":"The player will have interger amount of health and damage received will cost 1 to 3 health depending on the damage. The player can use mana to restore health through healing (holding Heal key). Since the levels are vast, there will be checkpoints scattered across the level. On death, player will be respawned to the last checkpoint. The player will lost part of the items in the inventory system. There will left a shell at the location the player died, in which the player can collect back the items by breaking the shell.","title":"Health"},{"location":"game-design-document/#mana","text":"Hitting enemies or some special object gains mana. The player will no longer receive mana if the mana is maxed out.","title":"Mana"},{"location":"game-design-document/#skills","text":"For each level passed, the player will grant a new skill. There will have a skill system in which the player can defines its moveset (or skill set) from the list of skills acquired from defeating bosses. Each skill will have its own cooldown and mana cost. The player can only edit moveset at the checkpoints. By editing moveset, the player can bind certain key input or key input combination to the skill obtained. If you have any uncertainty or suggestion, please open an issue .","title":"Skills"}]}